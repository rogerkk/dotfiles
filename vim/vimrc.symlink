syntax on

" Line numbering
set number

" Enable using the mouse to select
set mouse=a

set tabstop=2
set shiftwidth=2
set expandtab

" Use system clipboard
if has('unnamedplus')
  set clipboard=unnamedplus
endif

" File browsing setup
let g:netrw_banner = 0  " Disable top banner

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Use comma as leader key in stead of using the default (backslash).
let mapleader=','

nmap <leader>z :u<CR>
nmap <leader>Q :qa!<CR>
nmap <leader>q :bw<CR>

" Move lines by pressing Shift+↑ and Shift+↓
nnoremap <S-Up> :m-2<CR>
nnoremap <S-Down> :m+<CR>
inoremap <S-Up> <Esc>:m-2<CR>
inoremap <S-Down> <Esc>:m+<CR>

" Switch tabs by using Alt+j or Alt+k
nnoremap <A-j> :tabprevious<CR>
nnoremap <A-k> :tabprevious<CR>

" Reload config
nnoremap <silent> <leader><leader> :source $MYVIMRC<CR>

" Toogle line number counting method by using Ctrl+l
"
" Either normal, or relative to the current line. That way you can easily see
" the number to type after `y` or `d` without having to actually count
function! g:ToggleNuMode()
  if(&rnu == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-L> :call g:ToggleNuMode()<cr>

" Disabled because we are trying out nvim-kickstart (see .config/nvim/):
if has('nvim-REMOVE-THIS-TO-ENABLE-AGAIN') 
  " Auto-install vim-plug
  if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    autocmd VimEnter * PlugInstall | source $MYVIMRC
  endif

  " Define plugins (install by running :PlugInstall)
  call plug#begin('~/.config/neovim/plugged')
    "Plug 'ryanoasis/vim-devicons'
    Plug 'nvim-tree/nvim-web-devicons'
    Plug 'nvim-tree/nvim-tree.lua'

    " LSP
    Plug 'neovim/nvim-lspconfig'
    " Plug 'hrsh7th/nvim-compe'

    " Telescope
    " External dependencies: ripgrep, fd
    Plug 'nvim-telescope/telescope.nvim' 
    Plug 'nvim-lua/plenary.nvim'
    Plug 'BurntSushi/ripgrep'
    Plug 'sharkdp/fd'
    Plug 'nvim-treesitter/nvim-treesitter'
    
    " Diffview
    Plug 'nvim-lua/plenary.nvim'
    Plug 'sindrets/diffview.nvim'

    " Other development related plugins
    Plug 'vim-test/vim-test'
    Plug 'f-person/git-blame.nvim'
    Plug 'github/copilot.vim'
    
  call plug#end()


" Telescope (file search) setup
lua << EOF
local telescope = require('telescope')
local builtin = require('telescope.builtin')

telescope.setup {
  pickers = {
    find_files = { hidden = true }
  }
}

vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
EOF


" Solargraph setup
"
" Other necessary steps for this to work:
"
" * Install solargraph locally
"   `gem install solargraph`
" * Download core documentation for current ruby version 
"   `solargraph download-core`
" * Update YARD documentation that solargraph makes use of
"   `yard gems`
" * Make sure docs are generated for new gems
"   `yard config --gem-install-yri`
lua << EOF
require'lspconfig'.solargraph.setup{}

local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.format { async = true }<CR>", opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "solargraph" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
}
end
EOF

"
" vim-test
" 
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

let test#strategy='neovim'
let test#ruby#rspec#executable='docker exec -t -e RAILS_ENV=test legelisten_web_1 bundle exec rspec'

"
" git-blame
"
nmap <silent> <leader>bt :GitBlameToggle<CR>
nmap <silent> <leader>bc :GitBlameCopyCommitSHA<CR>
nmap <silent> <leader>bo :GitBlameOpenCommitURL<CR>

"
" Github Copilot
"
nmap <silent> <leader>c :Copilot<CR>
imap <M-.> <Plug>(copilot-next)
imap <M-,> <Plug>(copilot-previous)

endif
